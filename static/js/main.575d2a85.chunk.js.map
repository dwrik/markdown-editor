{"version":3,"sources":["components/PreviewPane.js","components/Editor.js","components/Header.js","App.js","Default.js","reportWebVitals.js","index.js"],"names":["PreviewPane","safeHTML","className","id","dangerouslySetInnerHTML","__html","marked","Editor","text","updateText","value","placeholder","onChange","Header","downloadMarkdown","href","target","rel","onClick","App","useState","setText","setSafeHTML","useEffect","cleanText","DOMPurify","sanitize","file","Blob","type","downloadLink","document","createElement","URL","createObjectURL","download","click","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qPAeeA,EAbK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACrB,OACE,qBAAKC,UAAU,kBAAf,SACE,qBACEC,GAAG,UACHC,wBAAyB,CACvBC,OAAQC,IAAOL,SCKVM,EAbA,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WACtB,OACE,qBAAKP,UAAU,kBAAf,SACE,0BACEC,GAAG,SACHO,MAAOF,EACPG,YAAY,wCACZC,SAAUH,OCWHI,EAlBA,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBAChB,OACE,mCACE,mBACEC,KAAK,2BACLC,OAAO,SACPC,IAAI,aACJf,UAAU,QAJZ,SAME,sDAEF,wBAAQA,UAAU,SAASgB,QAASJ,EAApC,kCC8BSK,EAhCH,WACV,MAAwBC,mBCVD,usCDUvB,mBAAOZ,EAAP,KAAaa,EAAb,KACA,EAAgCD,mBAAS,IAAzC,mBAAOnB,EAAP,KAAiBqB,EAAjB,KAMAC,qBAAU,WACR,IAAMC,EAAYC,IAAUC,SAASlB,GACrCc,EAAYE,KACX,CAAChB,IAUJ,OACE,sBAAKN,UAAU,OAAf,UACE,cAAC,EAAD,CAAQY,iBAVa,WACvB,IAAMa,EAAO,IAAIC,KAAK,CAACpB,GAAO,CAAEqB,KAAM,8BAChCC,EAAeC,SAASC,cAAc,KAC5CF,EAAaf,KAAOkB,IAAIC,gBAAgBP,GACxCG,EAAaK,SAnBQ,sBAoBrBL,EAAaM,WAMX,sBAAKlC,UAAU,YAAf,UACE,cAAC,EAAD,CAAQM,KAAMA,EAAMC,WArBP,SAAC,GAAgB,IAAdO,EAAa,EAAbA,OACpBK,EAAQL,EAAON,UAqBX,cAAC,EAAD,CAAaT,SAAUA,WEvBhBoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjB,SAASkB,eAAe,SAM1BZ,M","file":"static/js/main.575d2a85.chunk.js","sourcesContent":["import marked from 'marked'\r\n\r\nconst PreviewPane = ({ safeHTML }) => {\r\n  return (\r\n    <div className=\"child-container\">\r\n      <div\r\n        id=\"preview\"\r\n        dangerouslySetInnerHTML={{\r\n          __html: marked(safeHTML),\r\n        }}\r\n      ></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PreviewPane\r\n","const Editor = ({ text, updateText }) => {\r\n  return (\r\n    <div className=\"child-container\">\r\n      <textarea\r\n        id=\"editor\"\r\n        value={text}\r\n        placeholder=\"Start typing here to get a preview...\"\r\n        onChange={updateText}\r\n      ></textarea>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Editor\r\n","const Header = ({ downloadMarkdown }) => {\r\n  return (\r\n    <header>\r\n      <a\r\n        href=\"https://github.com/dwrik\"\r\n        target=\"_blank\"\r\n        rel=\"noreferrer\"\r\n        className=\"links\"\r\n      >\r\n        <h1>Markdown Previewer</h1>\r\n      </a>\r\n      <button className=\"button\" onClick={downloadMarkdown}>\r\n        Download as File\r\n      </button>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import DOMPurify from 'dompurify'\nimport { useState, useEffect } from 'react'\nimport { DEFAULT_TEXT } from './Default'\nimport PreviewPane from './components/PreviewPane'\nimport Editor from './components/Editor'\nimport Header from './components/Header'\n\nconst DEFAULT_FILENAME = 'markdown-preview.md'\n\nconst App = () => {\n  const [text, setText] = useState(DEFAULT_TEXT)\n  const [safeHTML, setSafeHTML] = useState('')\n\n  const updateText = ({ target }) => {\n    setText(target.value)\n  }\n\n  useEffect(() => {\n    const cleanText = DOMPurify.sanitize(text)\n    setSafeHTML(cleanText)\n  }, [text])\n\n  const downloadMarkdown = () => {\n    const file = new Blob([text], { type: 'text/plain; charset=utf-8' })\n    const downloadLink = document.createElement('a')\n    downloadLink.href = URL.createObjectURL(file)\n    downloadLink.download = DEFAULT_FILENAME\n    downloadLink.click()\n  }\n\n  return (\n    <div className=\"main\">\n      <Header downloadMarkdown={downloadMarkdown} />\n      <div className=\"container\">\n        <Editor text={text} updateText={updateText} />\n        <PreviewPane safeHTML={safeHTML} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","export const DEFAULT_TEXT = `# Markdown syntax guide\r\n\r\n## Headers\r\n\r\n# This is a Heading h1\r\n## This is a Heading h2 \r\n#### This is a Heading h4\r\n\r\n## Emphasis\r\n\r\n*This text will be italic*  \r\n_This will also be italic_\r\n\r\n**This text will be bold**  \r\n__This will also be bold__\r\n\r\n_You **can** combine them_\r\n\r\n## Lists\r\n\r\n### Unordered\r\n\r\n* Item 1\r\n* Item 2\r\n* Item 3\r\n\r\n### Ordered\r\n\r\n1. Item 1\r\n1. Item 2\r\n1. Item 3\r\n\r\n\r\n## Images\r\n\r\n![This is a alt text.](./images/sample.jpg \"This is a sample image.\")\r\n\r\n## Links\r\n\r\nYou are using [Markdown Previewer](https://github.com/dwrik/markdown-previewer/).\r\n\r\n## Blockquotes\r\n\r\n> Markdown is a lightweight markup language with plain-text-formatting syntax, created in 2004 by John Gruber with Aaron Swartz.\r\n>\r\n>> Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor.\r\n\r\n## Tables\r\n\r\n| Left columns  | Right columns |\r\n| ------------- |:-------------:|\r\n| left foo      | right foo     |\r\n| left bar      | right bar     |\r\n| left baz      | right baz     |\r\n\r\n## Blocks of code\r\n\r\n\\`\\`\\`\r\nconst message = 'Hello world';\r\nconsole.log(message);\r\n\\`\\`\\`\r\n\r\n## Inline code\r\n\r\nThis site uses \\`markedjs/marked\\`.\r\n`\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}